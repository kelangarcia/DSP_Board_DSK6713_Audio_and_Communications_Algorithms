// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (a0a3801a).
//
// c:\work_loc\2007.win.dsp\host\rtdx_mex\rtdxint.tli
//
// Wrapper implementations for Win32 type library c:\CCStudio_v3.1\cc\bin\rtdxint.dll
// compiler-generated file created 12/15/06 at 11:14:50 - DO NOT EDIT!

#pragma once

//
// interface IRtdxExp wrapper method implementations
//

inline long IRtdxExp::Open ( _bstr_t Channel_String, _bstr_t Read_Write ) {
    long _result;
    HRESULT _hr = raw_Open(Channel_String, Read_Write, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::Close ( ) {
    long _result;
    HRESULT _hr = raw_Close(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::Read ( VARIANT * pArr, long dataType, long numBytes ) {
    long _result;
    HRESULT _hr = raw_Read(pArr, dataType, numBytes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::ReadI1 ( unsigned char * pData ) {
    long _result;
    HRESULT _hr = raw_ReadI1(pData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::ReadI2 ( short * pData ) {
    long _result;
    HRESULT _hr = raw_ReadI2(pData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::ReadI4 ( long * pData ) {
    long _result;
    HRESULT _hr = raw_ReadI4(pData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::ReadF4 ( float * pData ) {
    long _result;
    HRESULT _hr = raw_ReadF4(pData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::ReadF8 ( double * pData ) {
    long _result;
    HRESULT _hr = raw_ReadF8(pData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::ReadSAI1 ( VARIANT * pArr ) {
    long _result;
    HRESULT _hr = raw_ReadSAI1(pArr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::ReadSAI2 ( VARIANT * pArr ) {
    long _result;
    HRESULT _hr = raw_ReadSAI2(pArr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::ReadSAI4 ( VARIANT * pArr ) {
    long _result;
    HRESULT _hr = raw_ReadSAI4(pArr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::ReadSAF4 ( VARIANT * pArr ) {
    long _result;
    HRESULT _hr = raw_ReadSAF4(pArr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::ReadSAF8 ( VARIANT * pArr ) {
    long _result;
    HRESULT _hr = raw_ReadSAF8(pArr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IRtdxExp::ReadSAI2V ( long * pStatus ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ReadSAI2V(pStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IRtdxExp::ReadSAI4V ( long * pStatus ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ReadSAI4V(pStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IRtdxExp::WriteI1 ( unsigned char Data, long * numBytes ) {
    long _result;
    HRESULT _hr = raw_WriteI1(Data, numBytes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::WriteI2 ( short Data, long * numBytes ) {
    long _result;
    HRESULT _hr = raw_WriteI2(Data, numBytes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::WriteI4 ( long Data, long * numBytes ) {
    long _result;
    HRESULT _hr = raw_WriteI4(Data, numBytes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::WriteF4 ( float Data, long * numBytes ) {
    long _result;
    HRESULT _hr = raw_WriteF4(Data, numBytes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::WriteF8 ( double Data, long * numBytes ) {
    long _result;
    HRESULT _hr = raw_WriteF8(Data, numBytes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::Write ( const _variant_t & Arr, long * numBytes ) {
    long _result;
    HRESULT _hr = raw_Write(Arr, numBytes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::Rewind ( ) {
    long _result;
    HRESULT _hr = raw_Rewind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::Flush ( ) {
    long _result;
    HRESULT _hr = raw_Flush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::Seek ( long MsgNum ) {
    long _result;
    HRESULT _hr = raw_Seek(MsgNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::SeekData ( long numBytes ) {
    long _result;
    HRESULT _hr = raw_SeekData(numBytes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::StatusOfWrite ( long * numBytes ) {
    long _result;
    HRESULT _hr = raw_StatusOfWrite(numBytes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::GetNumMsgs ( long * pNum ) {
    long _result;
    HRESULT _hr = raw_GetNumMsgs(pNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::GetChannelID ( _bstr_t Channel_String, long * chanId ) {
    long _result;
    HRESULT _hr = raw_GetChannelID(Channel_String, chanId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::GotoNextMsg ( ) {
    long _result;
    HRESULT _hr = raw_GotoNextMsg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::GetMsgID ( long * pMsgId ) {
    long _result;
    HRESULT _hr = raw_GetMsgID(pMsgId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::GetMsgNumber ( long * pMsgNum ) {
    long _result;
    HRESULT _hr = raw_GetMsgNumber(pMsgNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::GetMsgLength ( long * pLength ) {
    long _result;
    HRESULT _hr = raw_GetMsgLength(pLength, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::EnableRtdx ( ) {
    long _result;
    HRESULT _hr = raw_EnableRtdx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::DisableRtdx ( ) {
    long _result;
    HRESULT _hr = raw_DisableRtdx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::EnableChannel ( _bstr_t ChannelName ) {
    long _result;
    HRESULT _hr = raw_EnableChannel(ChannelName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::DisableChannel ( _bstr_t ChannelName ) {
    long _result;
    HRESULT _hr = raw_DisableChannel(ChannelName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::GetChannelStatus ( _bstr_t ChannelName, long * pChannelStatus ) {
    long _result;
    HRESULT _hr = raw_GetChannelStatus(ChannelName, pChannelStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::ConfigureRtdx ( short Mode, long MainBufferSize, long NumOfMainBuffers ) {
    long _result;
    HRESULT _hr = raw_ConfigureRtdx(Mode, MainBufferSize, NumOfMainBuffers, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::ConfigureLogFile ( _bstr_t FileName, long FileSize, short FileFullMode, short FileOpenMode ) {
    long _result;
    HRESULT _hr = raw_ConfigureLogFile(FileName, FileSize, FileFullMode, FileOpenMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::GetRTDXRev ( long * RevNum ) {
    long _result;
    HRESULT _hr = raw_GetRTDXRev(RevNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::GetStatusString ( BSTR * StatusString ) {
    long _result;
    HRESULT _hr = raw_GetStatusString(StatusString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::GetCapability ( long * Capability ) {
    long _result;
    HRESULT _hr = raw_GetCapability(Capability, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRtdxExp::RunDiagnostics ( short TestType, long TestMode, long TestInfo ) {
    long _result;
    HRESULT _hr = raw_RunDiagnostics(TestType, TestMode, TestInfo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IRtdxExp::GetDiagFilePath ( short TestType ) {
    BSTR _result;
    HRESULT _hr = raw_GetDiagFilePath(TestType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IRtdxExp::SetProcessor ( _bstr_t Board, _bstr_t Cpu ) {
    long _result;
    HRESULT _hr = raw_SetProcessor(Board, Cpu, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
